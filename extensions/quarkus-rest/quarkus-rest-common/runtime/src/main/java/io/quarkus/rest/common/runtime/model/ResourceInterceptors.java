package io.quarkus.rest.common.runtime.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ResourceInterceptors {

    private final List<ResourceRequestInterceptor> resourcePreMatchRequestInterceptors = new ArrayList<>();
    private final List<ResourceRequestInterceptor> globalResourceRequestInterceptors = new ArrayList<>();
    private final List<ResourceResponseInterceptor> globalResourceResponseInterceptors = new ArrayList<>();
    private final List<ResourceRequestInterceptor> nameResourceRequestInterceptors = new ArrayList<>();
    private final List<ResourceResponseInterceptor> nameResourceResponseInterceptors = new ArrayList<>();

    private final List<ResourceReaderInterceptor> globalResourceReaderInterceptors = new ArrayList<>();
    private final List<ResourceWriterInterceptor> globalResourceWriterInterceptors = new ArrayList<>();
    private final List<ResourceReaderInterceptor> nameResourceReaderInterceptors = new ArrayList<>();
    private final List<ResourceWriterInterceptor> nameResourceWriterInterceptors = new ArrayList<>();

    public List<ResourceRequestInterceptor> getGlobalRequestInterceptors() {
        return globalResourceRequestInterceptors;
    }

    public List<ResourceResponseInterceptor> getGlobalResponseInterceptors() {
        return globalResourceResponseInterceptors;
    }

    public List<ResourceRequestInterceptor> getNameRequestInterceptors() {
        return nameResourceRequestInterceptors;
    }

    public List<ResourceResponseInterceptor> getNameResponseInterceptors() {
        return nameResourceResponseInterceptors;
    }

    public List<ResourceRequestInterceptor> getResourcePreMatchRequestInterceptors() {
        return resourcePreMatchRequestInterceptors;
    }

    public void addGlobalRequestInterceptor(ResourceRequestInterceptor interceptor) {
        this.globalResourceRequestInterceptors.add(interceptor);
    }

    public void addGlobalResponseInterceptor(ResourceResponseInterceptor interceptor) {
        this.globalResourceResponseInterceptors.add(interceptor);
    }

    public void addNameRequestInterceptor(ResourceRequestInterceptor interceptor) {
        this.nameResourceRequestInterceptors.add(interceptor);
    }

    public void addNameResponseInterceptor(ResourceResponseInterceptor interceptor) {
        this.nameResourceResponseInterceptors.add(interceptor);
    }

    public void addResourcePreMatchInterceptor(ResourceRequestInterceptor interceptor) {
        resourcePreMatchRequestInterceptors.add(interceptor);
    }

    public List<ResourceReaderInterceptor> getGlobalResourceReaderInterceptors() {
        return globalResourceReaderInterceptors;
    }

    public List<ResourceWriterInterceptor> getGlobalResourceWriterInterceptors() {
        return globalResourceWriterInterceptors;
    }

    public List<ResourceReaderInterceptor> getNameResourceReaderInterceptors() {
        return nameResourceReaderInterceptors;
    }

    public List<ResourceWriterInterceptor> getNameResourceWriterInterceptors() {
        return nameResourceWriterInterceptors;
    }

    public void addGlobalReaderInterceptor(ResourceReaderInterceptor interceptor) {
        this.globalResourceReaderInterceptors.add(interceptor);
    }

    public void addGlobalWriterInterceptor(ResourceWriterInterceptor interceptor) {
        this.globalResourceWriterInterceptors.add(interceptor);
    }

    public void addNameReaderInterceptor(ResourceReaderInterceptor interceptor) {
        this.nameResourceReaderInterceptors.add(interceptor);
    }

    public void addNameWriterInterceptor(ResourceWriterInterceptor interceptor) {
        this.nameResourceWriterInterceptors.add(interceptor);
    }

    // we sort this at build time as the order of the elements in the lists is retained in generated bytecode
    // therefore at runtime the elements are already properly sorted
    public ResourceInterceptors sort() {
        Collections.sort(resourcePreMatchRequestInterceptors);
        Collections.sort(globalResourceRequestInterceptors);
        Collections.sort(globalResourceResponseInterceptors);
        Collections.sort(nameResourceRequestInterceptors);
        Collections.sort(nameResourceResponseInterceptors);
        return this;
    }

}
