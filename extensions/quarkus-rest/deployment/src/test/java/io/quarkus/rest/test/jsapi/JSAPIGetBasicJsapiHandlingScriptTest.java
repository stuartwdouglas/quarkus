package io.quarkus.rest.test.jsapi;

import java.util.function.Supplier;

import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.jboss.logging.Logger;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.RegisterExtension;

import io.quarkus.rest.runtime.client.QuarkusRestClient;
import io.quarkus.rest.test.simple.PortProviderUtil;
import io.quarkus.rest.test.simple.TestUtil;
import io.quarkus.test.QuarkusUnitTest;

/**
 * @tpSubChapter Jsapi
 * @tpChapter Integration tests
 * @tpSince RESTEasy 3.0.16
 */
public class JSAPIGetBasicJsapiHandlingScriptTest {

    static QuarkusRestClient client;
    protected static final Logger logger = Logger.getLogger(JSAPIGetBasicJsapiHandlingScriptTest.class.getName());

    @RegisterExtension
    static QuarkusUnitTest testExtension = new QuarkusUnitTest()
            .setArchiveProducer(new Supplier<JavaArchive>() {
                @Override
                public JavaArchive get() {
                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);
                    war.addClasses(PortProviderUtil.class);

//                    war.addAsWebInfResource(JSAPIGetBasicJsapiHandlingScriptTest.class.getPackage(), "web.xml", "web.xml");
                    return TestUtil.finishContainerPrepare(war, null, (Class<?>[]) null);
                }
            });

    @Before
    public void init() {
        client = (QuarkusRestClient) ClientBuilder.newClient();
    }

    @After
    public void after() throws Exception {
        client.close();
    }

    private String generateURL(String path) {
        return PortProviderUtil.generateURL(path, JSAPIGetBasicJsapiHandlingScriptTest.class.getSimpleName());
    }

    /**
     * @tpTestDetails The deployed application has configured JSApi servlet and the test gets the header of JSAPI script
     *                for handling request to REST resources with javascript.
     * @tpSince RESTEasy 3.0.16
     */
    @Test
    public void testGetJsapiHeaderScript() throws Exception {
        WebTarget target = client.target(generateURL("/rest-js"));
        Response response = target.request().get();
        Assert.assertEquals(Status.OK, response.getStatus());
        String responseString = response.readEntity(String.class);
        logger.info(responseString);
        Assert.assertTrue("Basic javascript generated by jsapi doesn't contain expected code",
                responseString.contains("REST.Request = function (){"));
    }
}
